# -*- coding: utf-8 -*-
"""Penalties.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qTMJEnVOlyHW-IB-j7z8SrE9h4dl_VYy
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

nflTeamData = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/pbp-2023.csv')

#get lions data offense or defence
lionsData = nflTeamData.loc[(nflTeamData['OffenseTeam'] == 'DET') | (nflTeamData['DefenseTeam'] == 'DET')]

"""'GameId',
'GameDate',
'Quarter',
'Minute',
'Second',
OffenseTeam',
'DefenseTeam',
'Down',
'ToGo',
'YardLine',
'Unnamed: 10',
'SeriesFirstDown',
'Unnamed: 12',
'NextScore',
'Description',
'TeamWin',
'SeasonYear',
'Yards',
'Formation',
'PlayType',
'IsRush',
'IsPass',
'IsIncomplete',
'IsTouchdown',
'PassType',
'IsSack',
'IsChallenge',
'IsChallengeReversed',
'Challenger',
'IsMeasurement',
'IsInterception',
'IsFumble',
'IsPenalty',
'IsTwoPointConversion',
'IsTwoPointConversionSuccessful',
'RushDirection',
'YardLineFixed',
'YardLineDirection',
'IsPenaltyAccepted',
'PenaltyTeam',
'IsNoPlay',
'PenaltyType',
'PenaltyYards'
"""

lionsData['DetScore']=0
lionsData['OpponentScore']=0
for index, row in lionsData.iterrows():
  if(row['IsTouchdown'] == True and row['IsInterception'] == False):
    if(row['IsPenalty'] == False and "NO PLAY" not in str.upper(row['Description'])):
      lionsData.loc[index,'PointsScored'] = str(row['OffenseTeam']) + str("= 6")
      if(str(row['OffenseTeam'])=='DET'):
        lionsData.loc[index,'DetScore'] = 6
      else:
        lionsData.loc[index,'OpponentScore'] = 6
  elif(row['IsTouchdown'] == True and row['IsInterception'] == True):
    if(str(row['DefenseTeam'])=='DET'):
      lionsData.loc[index,'DetScore'] = 6
    else:
      lionsData.loc[index,'OpponentScore'] = 6
  elif(row['IsTwoPointConversion'] == True and row['IsTwoPointConversionSuccessful'] == True):
    lionsData.loc[index,'PointsScored'] = str(row['OffenseTeam']) + str("= 2")
    if(str(row['OffenseTeam'])=='DET'):
      lionsData.loc[index,'DetScore'] = 2
    else:
      lionsData.loc[index,'OpponentScore'] = 2
  elif("FIELD GOAL IS GOOD" in str.upper(row['Description'])):
    lionsData.loc[index,'PointsScored'] = str(row['OffenseTeam']) + str("= 3")
    if(str(row['OffenseTeam'])=='DET'):
      lionsData.loc[index,'DetScore'] = 3
    else:
      lionsData.loc[index,'OpponentScore'] = 3
  elif("EXTRA POINT IS GOOD" in str.upper(row['Description'])):
    lionsData.loc[index,'PointsScored'] = str(row['OffenseTeam']) + str("= 1")
    if(str(row['OffenseTeam'])=='DET'):
      lionsData.loc[index,'DetScore'] = 1
    else:
      lionsData.loc[index,'OpponentScore'] = 1
  elif("SAFETY." in str.upper(row['Description'])):
    lionsData.loc[index,'PointsScored'] = str(row['DefenseTeam']) + str("= 2")
    if(str(row['DefenseTeam'])=='DET'):
      lionsData.loc[index,'OpponentScore'] = 2
    else:
      lionsData.loc[index,'DefenseTeam'] = 2
  else:
    lionsData.loc[index,'PointsScored'] = ""

lionsPenaltiesData =pd.DataFrame(lionsData[['GameId','PenaltyTeam','IsPenaltyAccepted']].groupby(['GameId','PenaltyTeam']).sum('IsPenaltyAccepted').reset_index())

lionsPenaltiesData['isDetroit']="OPP"
for index, row in lionsPenaltiesData.iterrows():
  if(row['PenaltyTeam'] == 'DET'):
    lionsPenaltiesData.loc[index,'isDetroit'] = "DET"
lionsPenaltiesData.sort_values(['GameId','isDetroit'],ascending=[True,True],inplace=True) #Sort isn't in place by default! hence inplace=True


lionsDataYards =pd.DataFrame(lionsData[['GameId','OffenseTeam','Yards','DetScore','OpponentScore']].groupby(['GameId','OffenseTeam']).sum('Yards').reset_index())
lionsDataYards['isDetroit']="OPP"
for index, row in lionsDataYards.iterrows():
  if(row['OffenseTeam'] == 'DET'):
    lionsDataYards.loc[index,'isDetroit'] = "DET"
#get the final YARDS information
lionsDataFinalScore = lionsDataYards
lionsDataYards.sort_values(['isDetroit','GameId'],ascending=[True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
lionsDataYards.reset_index(inplace = True)


#get the final SCORE information
lionsDataFinalScore.sort_values(['GameId','isDetroit'],ascending=[True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
lionsDataFinalScore.reset_index(inplace = True)

from numpy import nan
lionsDataYards =pd.DataFrame(lionsData[['GameId','OffenseTeam','Yards','DetScore','OpponentScore']].groupby(['GameId','OffenseTeam']).sum('Yards').reset_index())
lionsDataYards['isDetroit']="OPP"
for index, row in lionsDataYards.iterrows():
  if(row['OffenseTeam'] == 'DET'):
    lionsDataYards.loc[index,'isDetroit'] = "DET"
#get the final YARDS information
lionsDataFinalScore = lionsDataYards
lionsDataYards.sort_values(['isDetroit','GameId'],ascending=[True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
lionsDataYards.reset_index(inplace = True)
lionsDataYards
#get the final SCORE information
lionsDataFinalScore.sort_values(['GameId','isDetroit'],ascending=[True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
lionsDataFinalScore.reset_index(inplace = True)


for index, row in lionsDataYards.iterrows():
  if(index % 2): #OPP
    lionsDataYards.loc[index,'DetScore'] =lionsDataYards.loc[index,'DetScore'] +lionsDataYards.loc[index-1,'DetScore']
    lionsDataYards.loc[index,'OpponentScore'] =lionsDataYards.loc[index,'OpponentScore'] +lionsDataYards.loc[index-1,'OpponentScore']
    if(lionsDataYards.loc[index,'DetScore'] < lionsDataYards.loc[index,'OpponentScore']):
      lionsDataYards.loc[index,'WinsLosses'] = "LOSS"
    else:
      lionsDataYards.loc[index,'WinsLosses'] = "WIN"
    if(index !=0):
      lionsDataYards.loc[index-1,'DetScore'] = lionsDataYards.loc[index,'DetScore']
      lionsDataYards.loc[index-1,'OpponentScore'] = lionsDataYards.loc[index,'OpponentScore']

for index, row in lionsDataYards.iterrows():
  if(index % 2): #OPP
    gameFinalString = "{} {} {} {} {}{}".format(lionsDataYards.loc[index,'OffenseTeam'], lionsDataYards.loc[index,'OpponentScore'],"vs. DET", lionsDataYards.loc[index,'DetScore'],'\n',lionsDataYards.loc[index,'WinsLosses'])
    lionsDataYards.loc[index,'Games'] =gameFinalString

#sort wins losses
lionsDataYards.sort_values(['WinsLosses','GameId','isDetroit'],ascending=[True,True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
#remove null values for the use of the game info
gamesDF = lionsDataYards.dropna(subset=['Games'])

lionsDataYards.sort_values(['WinsLosses','GameId','isDetroit'],ascending=[True,True,True],inplace=True) #Sort isn't in place by default! hence inplace=True
#remove null values for the use of the game info
gamesDF = lionsDataYards.dropna(subset=['Games'])


detPenaltiesDF = lionsPenaltiesData[~lionsPenaltiesData['isDetroit'].str.contains('OPP')]
oppPenaltiesDF = lionsPenaltiesData[~lionsPenaltiesData['isDetroit'].str.contains('DET')]


fig, ax = plt.subplots()

index = np.arange(len(gamesDF['Games']))
bar_width = 0.4
opacity = 0.8

ax.bar(index, detPenaltiesDF['IsPenaltyAccepted'], color='b', align='edge', width=bar_width, label = 'Detroit')
ax.bar(index, oppPenaltiesDF['IsPenaltyAccepted'], color='r', align='edge', width=-bar_width,label = 'Opponent')

# Assign the tick labels
ax.set_xticks(index)
ax.set_xticklabels(gamesDF['Games'], rotation=90)

plt.ylabel('Number of Penalties In Game')
plt.legend()
plt.show()
lionsDataYards

lionsPenaltiesData